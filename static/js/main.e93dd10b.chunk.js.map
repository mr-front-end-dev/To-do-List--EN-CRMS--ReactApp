{"version":3,"sources":["GlobalStyle.js","features/tasks/TasksPage/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","routes.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Button/index.js","features/tasks/TasksPage/Buttons/index.js","common/Projects/Clock/styled.js","common/Projects/Clock/index.js","common/Projects/styled.js","common/Projects/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/Author.js","Navigation/styled.js","Navigation/index.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","lightGrey","StyledForm","styled","form","breakpoint","mobileMax414","Button","button","white","crimson","mobileMax360","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","loading","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","input","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","Input","ref","value","type","placeholder","onChange","target","required","List","ul","Item","li","hidden","css","toggleDone","deepSkyBlue","remove","Content","span","StyledLink","a","toTask","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","TaskList","query","searchQueryParamName","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","Wrapper","div","lightSlateGrey","Buttons","areTasksEmpty","isEveryTaskDone","disabled","StyledClock","formatDate","date","toLocaleString","undefined","weekday","hour","minute","second","day","month","Clock","Date","setDate","useEffect","intervalId","setInterval","clearInterval","Links","section","Link","Projects","href","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","Container","children","replaceQueryParameter","history","useHistory","searchParams","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","TasksPage","Search","TaskPage","useParams","find","getTaskById","contentEditable","activeClassName","StyledNavLink","NavLink","attrs","Navigation","path","Author","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","black","App","document","getElementById"],"mappings":"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","file":"static/js/main.e93dd10b.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  .body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    background-color: ${({ theme }) => theme.color.lightGrey};\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax414}px) {\r\n      grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 20px; \r\n  color: ${({ theme }) => theme.color.white}; \r\n  background-color: ${({ theme }) => theme.color.crimson}; \r\n  border: none;\r\n  transition: color 0.3s;\r\n\r\n  @media (max-width: ${({ theme }) => theme.mobileMax360}px) {\r\n      width: 75vw;\r\n      font-size: 20px;\r\n      text-align: center;\r\n  }\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n  JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n  name: 'tasks',\r\n  initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: task }) => {\r\n      tasks.push(task);\r\n    },\r\n    toggleHideDone: state => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    removeTask: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks.splice(index, 1);\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n      }\r\n    },\r\n    fetchExampleTasks: state => { \r\n      state.loading = true;\r\n    },\r\n    fetchExampleTasksSuccess: (state, { payload: tasks }) => { \r\n      state.tasks = tasks;\r\n      state.loading = false;\r\n    },\r\n    fetchExampleTasksError: (state) => { \r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { \r\n  addTask, \r\n  toggleHideDone, \r\n  toggleTaskDone,\r\n  removeTask,\r\n  setAllDone,\r\n  fetchExampleTasks,\r\n  fetchExampleTasksSuccess,\r\n  fetchExampleTasksError,\r\n } = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n  const tasks = selectTasks(state);\r\n\r\n  if (!query || query.trim() === \"\") {\r\n    return tasks;\r\n  }\r\n\r\n  return tasks.filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n};\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n  padding: 20px; \r\n  border: 1px solid ${({ theme }) => theme.color.lightGrey};\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax360}px) {\r\n    width: 75vw;\r\n    font-size: 14px;\r\n    text-align: center;\r\n  }\r\n`;","import React, { useState, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport { Button, StyledForm } from './styled';\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport Input from '../../Input';\r\n\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n\r\n    event.preventDefault();\r\n    \r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n    if (!trimmedNewTaskContent) {\r\n      return;\r\n    }\r\n\r\n    dispatch(addTask({\r\n      content: trimmedNewTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }));\r\n\r\n    setNewTaskContent(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        ref={inputRef}\r\n        value={newTaskContent}\r\n        type=\"text\" \r\n        placeholder=\"What is there to do?\" \r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n        required \r\n      />\r\n      <Button>Add new task</Button>\r\n    </StyledForm>\r\n  )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n  margin: 0; \r\n  padding: 0; \r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 10px;\r\n  align-items: center;\r\n  padding: 10px; \r\n  border-bottom: 1px solid ${({ theme }) => theme.color.lightGrey}; \r\n\r\n  ${({ hidden }) => hidden && css`\r\n    display: none;\r\n  `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border: none; \r\n  color: ${({ theme }) => theme.color.white}; \r\n  font-size: 22px;\r\n  width: 30px; \r\n  height: 30px; \r\n  padding: 0; \r\n  transition: filter 0.3s;\r\n\r\n   ${({ toggleDone }) => toggleDone && css`\r\n    background-color: ${({ theme }) => theme.color.deepSkyBlue}; \r\n  `} \r\n\r\n  ${({ remove }) => remove && css`\r\n    background-color: ${({ theme }) => theme.color.crimson};\r\n  `}\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n`;\r\n\r\nexport const Content = styled.span`\r\n  ${({ done }) => done && css`\r\n    text-decoration: line-through;\r\n  `}\r\n`;\r\n// _____________________________________________________\r\nexport const StyledLink = styled.a`\r\n  color: ${({ theme }) => theme.color.white};\r\n  text-decoration: none;\r\n  \r\n  &:hover {\r\n    border-bottom: 1px solid;\r\n  }\r\n  `;\r\n  // _____________________________________________________","export const toTasks = () => \"/tasks\";\r\nexport const toAuthor = () => \"/author\";\r\n\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/tasks/${id}`;","export default \"search\";","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = key => {\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  return searchParams.get(key);\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  return ({ key, value }) => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    if (value === undefined) {\r\n      searchParams.delete(key);\r\n    } else {\r\n      searchParams.set(key, value);\r\n    }\r\n\r\n    const newSearch = searchParams.toString();\r\n    history.push(`${location.pathname}?${newSearch}`);\r\n  }\r\n};","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { List, Item, Content, Button, StyledLink } from './styled';\r\nimport { toTask } from '../../../../routes';\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from '../../tasksSlice';\r\nimport searchQueryParamName from '../searchQueryParamName';\r\nimport { useQueryParameter } from \"../queryParameters\";\r\n\r\nconst TaskList = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item \r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button \r\n            toggleDone\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>    \r\n           <StyledLink to={toTask({ id: task.id })}>\r\n             {task.content}\r\n           </StyledLink>\r\n          </Content>\r\n          <Button \r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n              🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.button`\r\n  background-color: transparent;\r\n  color: ${({ theme }) => theme.color.deepSkyBlue};\r\n  border: none;\r\n  margin: 0 0 0 20px;\r\n  border-bottom: 1px solid transparent;\r\n  transition: filter 0.3s;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax414}px) {\r\n      flex-basis: 100%;\r\n      margin: 10px;\r\n  }\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: ${({ theme }) => theme.color.lightSlateGrey}\r\n  }\r\n`;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Wrapper } from './styled';\r\nimport Button from '../Button';\r\nimport { \r\n  toggleHideDone, \r\n  setAllDone, \r\n  selectAreTasksEmpty, \r\n  selectHideDone, \r\n  selectIsEveryTaskDone, \r\n  // ___________________\r\n  fetchExampleTasks,\r\n  // ___________________\r\n} from '../../tasksSlice';\r\n\r\nconst Buttons = () => {\r\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* _____________________________________________ */}\r\n      <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n      {/* _____________________________________________ */}\r\n        Download sample tasks\r\n      </Button>\r\n      {!areTasksEmpty && (\r\n        <>\r\n          <Button onClick={() => dispatch(toggleHideDone())}>\r\n            {hideDone ? \"Show\" : \"Hide\"} completed tasks\r\n          </Button>\r\n          <Button \r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={isEveryTaskDone}\r\n          >\r\n            Complete all tasks\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Wrapper> \r\n  );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledClock = styled.div`\r\n  text-align: right;\r\n  font-family: monospace;\r\n  color:${({ theme }) => theme.color.crimson};\r\n  background-color: ${({ theme }) => theme.color.white};\r\n  font-size: 16px;\r\n  padding: 20px;\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { StyledClock } from \"./styled\";\r\n\r\nconst formatDate = (date) => date.toLocaleString(undefined, {\r\n  weekday: \"long\",\r\n  hour: \"2-digit\",\r\n  minute: \"2-digit\",\r\n  second: \"2-digit\",\r\n  day: \"numeric\",\r\n  month: \"long\"\r\n});\r\n\r\nexport const Clock = () => {\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setDate(new Date());\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <StyledClock>\r\n      Today is\r\n      {\" \"}\r\n      {formatDate(date)}\r\n    </StyledClock>\r\n  )\r\n}\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const Links = styled.section`\r\n  background-color: ${({ theme }) => theme.color.white};\r\n  padding: 20px;\r\n  cursor: context-menu;\r\n`;\r\n\r\nexport const Link = styled.a`\r\n  cursor: context-menu;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin: 5px;\r\n  padding: 8px;\r\n  cursor: context-menu;\r\n  border-style: none;\r\n  background-color: ${({ theme }) => theme.color.crimson};\r\n  color: ${({ theme }) => theme.color.white};\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  ${({ deepSkyBlue }) => deepSkyBlue && css`\r\n    background-color: ${({ theme }) => theme.color.deepSkyBlue};\r\n    color: ${({ theme }) => theme.color.white};\r\n  `}\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n`;\r\n\r\n","import React from 'react';\r\nimport { Clock } from \"./Clock\";\r\nimport { Links, Link, Button } from \"./styled\";\r\n\r\nconst Projects = () => (\r\n  <Links>\r\n    <Clock />\r\n    <Link href=\"ToDo-List--DE-CRMS--ReactApp\"><Button>DE</Button></Link>\r\n    <Link href=\"ToDo-List--ES-CRMS--ReactApp\"><Button>ES</Button></Link>\r\n    <Link href=\"ToDo-List--RU-CRMS--ReactApp\"><Button>RU</Button></Link>\r\n    <Link href=\"ToDo-List--PL-CRMS--ReactApp\"><Button>PL</Button></Link>\r\n    <Link href=\"ToDo-List--UA-CRMS--ReactApp\"><Button>UA</Button></Link>\r\n    <Link href=\"#\"><Button deepSkyBlue>🌓</Button></Link>\r\n  </Links>\r\n)\r\n\r\nexport default Projects;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n  margin: 10px 0;\r\n  background: ${({ theme }) => theme.color.white};  \r\n  box-shadow: 0 0 30px ${({ theme }) => theme.color.lightGrey}; \r\n`;\r\n\r\nexport const Header = styled.header`\r\n  border-bottom: 1px solid ${({ theme }) => theme.color.lightGrey}; \r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-gap: 20px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px; \r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax414}px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  padding: 10px;\r\n  color: ${({ theme }) => theme.color.deepSkyBlue};\r\n  font-size: 30px;\r\n  margin: 0;\r\n  text-align: left;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n  padding: 20px;\r\n  background-color: ${({ theme }) => theme.color.lightSlateGrey};\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax360}px) {\r\n    padding: 15px;\r\n  }\r\n`;","import React from 'react';\r\nimport { Wrapper, Header, Title, Body } from './styled';\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Body>\r\n      {body}\r\n    </Body>\r\n  </Wrapper> \r\n);\r\n\r\nexport default Section;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h2`\r\n  padding: 10px;\r\n  color: ${({ theme }) => theme.color.deepSkyBlue};\r\n  font-size: 30px;\r\n  margin: 0;\r\n  text-align: left;\r\n`;","import React from 'react';\r\nimport { Title } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <Title>{title}</Title>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 900px;\r\n  padding: 20px; \r\n  margin: 0 auto; \r\n`;","import React from 'react';\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n  <Wrapper>\r\n    {children}\r\n  </Wrapper>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport Input from \"../../Input\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\n\r\nexport default () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n  const onInputChange = ({ target }) => {\r\n    replaceQueryParameter({\r\n      key: searchQueryParamName,\r\n      value: target.value.trim() !== \"\" ? target.value : undefined,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Input \r\n        placeholder=\"Filter tasks\"\r\n        value={query || \"\"}\r\n        onChange={onInputChange}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};","import React from 'react';\r\nimport Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Projects from \"../../../common/Projects\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport Search from \"./Search\";\r\n\r\nfunction TasksPage() {\r\n\r\n  return (\r\n    <Container>\r\n      <Projects />\r\n      <Header title=\"ToDo list\" />\r\n      <Section \r\n        title=\"Add new task\" \r\n        body={<Form />} \r\n        />\r\n        <Section \r\n        title=\"Search engine\" \r\n        body={<Search />} \r\n        />\r\n      <Section \r\n        title=\"ToDo list\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n        />\r\n  </Container>\r\n  );\r\n};\r\n\r\n\r\nexport default TasksPage;\r\n","import React from 'react';\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from 'react-redux';\r\nimport { getTaskById } from '../tasksSlice';\r\n\r\nfunction TaskPage() {\r\n  const { id } = useParams();\r\n  const task = useSelector(state => getTaskById(state, id));\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Task details\" />\r\n      <Section \r\n        title={task ? task.content : \"Not found the task 😢\"} \r\n        body={!!task && (\r\n          <><strong>Completed:</strong> {task.done ? \"Yes\" : \"No\"}</>\r\n        )} \r\n      />\r\n\r\n  </Container>\r\n  );\r\n};\r\n\r\nexport default TaskPage;","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\n\r\nexport default () => (\r\n  <Container>\r\n      <Header title=\"About the author\" />\r\n      <Section \r\n        title=\"Nikita Rysiev\" \r\n        body={\r\n          <p contentEditable>\r\n            <p>you can edit the text below</p>\r\n            <p>Hej! My name a Nick, and I am a beginner Junior Front-End (React) Developer and 👶 Junior Manual Software Tester with introduction to automation.\r\n            My native language is Russian, but I learn and practice more English language, Polish and some German.</p> \r\n            <p>Now I try to study software testing and some coding of simple web applications.</p>\r\n            <p>I want to know coding and speaking English very well to be useful in the labor market. \r\n            </p>\r\n          </p>\r\n          } \r\n        />\r\n  </Container>\r\n);","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"link-active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n  activeClassName,\r\n}))`\r\n  color: ${({ theme }) => theme.color.white};\r\n  text-decoration: none;\r\n\r\n  &.${activeClassName} {\r\n    font-weight: bold;\r\n  }\r\n\r\n  &:hover {\r\n    border-bottom: 1px solid;\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  background: ${({ theme }) => theme.color.deepSkyBlue};\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  list-style: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  margin: 20px;\r\n`;\r\n","import React from \"react\";\r\nimport { toAuthor, toTasks } from \"../routes\";\r\nimport { List, Item, StyledNavLink } from \"./styled\";\r\n\r\nexport default () => {\r\n  return (\r\n    <nav>\r\n      <List>\r\n        <Item>\r\n          <StyledNavLink to={toTasks()}>Tasks</StyledNavLink>\r\n        </Item>\r\n      </List>\r\n      <List>\r\n        <Item>\r\n          <StyledNavLink to={toAuthor()}>About the author</StyledNavLink>\r\n        </Item>\r\n      </List>\r\n    </nav>\r\n  );\r\n};","import React from \"react\";\r\nimport Tasks from \"./features/tasks/TasksPage\";\r\nimport Task from \"./features/tasks/TaskPage\";\r\nimport Author from \"./features/author/Author\";\r\n\r\nimport { \r\n  HashRouter, \r\n  Switch, \r\n  Route, \r\n  Redirect \r\n} from \"react-router-dom\";\r\nimport { toAuthor, toTask, toTasks } from \"./routes\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nexport default () => (\r\n  <HashRouter>\r\n    <Navigation />\r\n    \r\n      <Switch>\r\n        <Route path={toTask()}>\r\n          <Task />\r\n        </Route>\r\n        <Route path={toTasks()}>\r\n          <Tasks />\r\n        </Route>\r\n        <Route path={toAuthor()}>\r\n          <Author />\r\n        </Route>\r\n        <Route>\r\n          <Redirect to={toTasks()} />\r\n        </Route>\r\n      </Switch>\r\n  </HashRouter>\r\n);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/ToDo-List--EN-CRMS--ReactApp/exampleTasks.json\");\r\n\r\n  if (!response.ok) {\r\n    new Error(response.statusText);\r\n  }\r\n\r\n  return await response.json();\r\n};","import { takeLatest, call, put, delay, select, takeEvery } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, fetchExampleTasksSuccess, fetchExampleTasksError, selectTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  try {\r\n    yield delay(1000);\r\n    const exampleTasks = yield call (getExampleTasks);\r\n    yield put(fetchExampleTasksSuccess(exampleTasks));\r\n  } catch (error) {\r\n    yield put(fetchExampleTasksError());\r\n    yield call(alert, \"Something went wrong!\");\r\n  }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all ([\r\n    tasksSaga(),\r\n  ]);\r\n};","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from './GlobalStyle';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n","export const theme = {\r\n  color: {\r\n    white: \"#fff\",\r\n    black: \"#000\",\r\n    deepSkyBlue: \"#00bfff\",\r\n    crimson: \"#ec365b\",\r\n    lightSlateGrey: \"#778899\",\r\n    lightGrey: \"#d3d3d3\",\r\n    // yellow: \"#ffff00\",\r\n    // forestGreen: \"#228b22\",\r\n  },\r\n  breakpoint: {\r\n    mobileMax360: 360,\r\n    mobileMax414: 414,\r\n  },\r\n};"],"sourceRoot":""}