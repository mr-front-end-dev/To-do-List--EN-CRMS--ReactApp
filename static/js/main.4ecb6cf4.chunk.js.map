{"version":3,"sources":["GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","common/Projects/Clock/styled.js","common/Projects/Clock/index.js","common/Projects/styled.js","common/Projects/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","features/author/Author.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","lightgrey","StyledForm","styled","form","breakpoint","mobileMax414","Input","input","mobileMax360","Button","button","white","crimson","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","setTasks","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","value","type","placeholder","onChange","target","required","List","ul","Item","li","hidden","css","Content","span","toggleDone","deepskyblue","remove","TaskList","useSelector","map","onClick","StyledClock","div","formatDate","date","toLocaleString","undefined","weekday","hour","minute","second","day","month","Clock","Date","setDate","useEffect","intervalId","setInterval","clearInterval","Links","section","Link","a","deepSkyBlue","Projects","href","Wrapper","lightslategrey","Buttons","areTasksEmpty","isEveryTaskDone","disabled","Header","header","Title","h2","Body","yellow","Section","title","body","extraHeaderContent","Container","children","Tasks","className","to","path","Author","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","console","log","delay","call","exampleTasks","put","alert","select","takeLatest","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","black","App","document","getElementById"],"mappings":"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","file":"static/js/main.4ecb6cf4.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  .body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    background-color: ${({ theme }) => theme.color.lightgrey};\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax414}px) {\r\n      grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 20px; \r\n  border: 1px solid ${({ theme }) => theme.color.lightgrey};\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax360}px) {\r\n    width: 75vw;\r\n    font-size: 14px;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 20px; \r\n  color: ${({ theme }) => theme.color.white}; \r\n  background-color: ${({ theme }) => theme.color.crimson}; \r\n  border: none;\r\n  transition: color 0.3s;\r\n\r\n  @media (max-width: ${({ theme }) => theme.mobileMax360}px) {\r\n      width: 75vw;\r\n      font-size: 20px;\r\n      text-align: center;\r\n  }\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n  JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n  name: 'tasks',\r\n  initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: task }) => {\r\n      tasks.push(task);\r\n    },\r\n    toggleHideDone: state => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    removeTask: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks.splice(index, 1);\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n      }\r\n    },\r\n    fetchExampleTasks: () => { },\r\n    setTasks: (state, { payload: tasks }) => {\r\n      state.tasks = tasks;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { \r\n  addTask, \r\n  toggleHideDone, \r\n  toggleTaskDone,\r\n  removeTask,\r\n  setAllDone,\r\n  fetchExampleTasks,\r\n  setTasks,\r\n } = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport default tasksSlice.reducer;","import React, { useState, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport { Input, Button, StyledForm } from './styled';\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n\r\n    event.preventDefault();\r\n    \r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n    if (!trimmedNewTaskContent) {\r\n      return;\r\n    }\r\n\r\n    dispatch(addTask({\r\n      content: trimmedNewTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }));\r\n\r\n    setNewTaskContent(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        ref={inputRef}\r\n        value={newTaskContent}\r\n        type=\"text\" \r\n        placeholder=\"What is there to do?\" \r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n        required \r\n      />\r\n      <Button>Add new task</Button>\r\n    </StyledForm>\r\n  )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n  margin: 0; \r\n  padding: 0; \r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 10px;\r\n  align-items: center;\r\n  padding: 10px; \r\n  border-bottom: 1px solid ${({ theme }) => theme.color.lightgrey}; \r\n\r\n  ${({ hidden }) => hidden && css`\r\n    display: none;\r\n  `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n  ${({ done }) => done && css`\r\n    text-decoration: line-through;\r\n  `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border: none; \r\n  color: ${({ theme }) => theme.color.white}; \r\n  font-size: 22px;\r\n  width: 30px; \r\n  height: 30px; \r\n  padding: 0; \r\n  transition: filter 0.3s;\r\n\r\n   ${({ toggleDone }) => toggleDone && css`\r\n    background-color: ${({ theme }) => theme.color.deepskyblue}; \r\n  `} \r\n\r\n  ${({ remove }) => remove && css`\r\n    background-color: ${({ theme }) => theme.color.crimson};\r\n  `}\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n`;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { List, Item, Content, Button } from './styled';\r\nimport { selectTasks, toggleTaskDone, removeTask, selectHideDone } from '../tasksSlice';\r\n\r\nconst TaskList = () => {\r\n  const tasks = useSelector(selectTasks);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item \r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button \r\n            toggleDone\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>    \r\n           {task.content}\r\n          </Content>\r\n          <Button \r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n              🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledClock = styled.div`\r\n  text-align: right;\r\n  font-family: monospace;\r\n  color:${({ theme }) => theme.color.crimson};\r\n  background-color: ${({ theme }) => theme.color.white};\r\n  font-size: 16px;\r\n  padding: 20px;\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { StyledClock } from \"./styled\";\r\n\r\nconst formatDate = (date) => date.toLocaleString(undefined, {\r\n  weekday: \"long\",\r\n  hour: \"2-digit\",\r\n  minute: \"2-digit\",\r\n  second: \"2-digit\",\r\n  day: \"numeric\",\r\n  month: \"long\"\r\n});\r\n\r\nexport const Clock = () => {\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setDate(new Date());\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <StyledClock>\r\n      Today is\r\n      {\" \"}\r\n      {formatDate(date)}\r\n    </StyledClock>\r\n  )\r\n}\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const Links = styled.section`\r\n  background-color: ${({ theme }) => theme.color.white};\r\n  padding: 20px;\r\n  cursor: context-menu;\r\n`;\r\n\r\nexport const Link = styled.a`\r\n  cursor: context-menu;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin: 5px;\r\n  padding: 8px;\r\n  cursor: context-menu;\r\n  border-style: none;\r\n  background-color: ${({ theme }) => theme.color.crimson};\r\n  color: ${({ theme }) => theme.color.white};\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  ${({ deepSkyBlue }) => deepSkyBlue && css`\r\n    background-color: ${({ theme }) => theme.color.deepskyblue};\r\n    color: ${({ theme }) => theme.color.white};\r\n  `}\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n`;\r\n\r\n","import React from 'react';\r\nimport { Clock } from \"./Clock\";\r\nimport { Links, Link, Button } from \"./styled\";\r\n\r\nconst Projects = () => (\r\n  <Links>\r\n    <Clock />\r\n    <Link href=\"#\"><Button>RU</Button></Link>\r\n    <Link href=\"#\"><Button>DE</Button></Link>\r\n    <Link href=\"#\"><Button>ES</Button></Link>\r\n    <Link href=\"#\"><Button>PL</Button></Link>\r\n    <Link href=\"#\"><Button>UA</Button></Link>\r\n    <Link href=\"#\"><Button deepSkyBlue>🌓</Button></Link>\r\n  </Links>\r\n)\r\n\r\nexport default Projects;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: transparent;\r\n  color: ${({ theme }) => theme.color.deepskyblue};\r\n  border: none;\r\n  margin: 0 0 0 20px;\r\n  border-bottom: 1px solid transparent;\r\n  transition: filter 0.3s;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax414}px) {\r\n      flex-basis: 100%;\r\n      margin: 10px;\r\n  }\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: ${({ theme }) => theme.color.lightslategrey}\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Wrapper, Button } from './styled';\r\nimport { \r\n  toggleHideDone, \r\n  setAllDone, \r\n  selectAreTasksEmpty, \r\n  selectHideDone, \r\n  selectIsEveryTaskDone, \r\n  fetchExampleTasks \r\n} from '../tasksSlice';\r\n\r\nconst Buttons = () => {\r\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n        Download sample tasks\r\n      </Button>\r\n      {!areTasksEmpty && (\r\n        <>\r\n          <Button onClick={() => dispatch(toggleHideDone())}>\r\n            {hideDone ? \"Show\" : \"Hide\"} completed tasks\r\n          </Button>\r\n          <Button \r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={isEveryTaskDone}\r\n          >\r\n            Complete all tasks\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Wrapper> \r\n  );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n  margin: 10px 0;\r\n  background: ${({ theme }) => theme.color.white};  \r\n  box-shadow: 0 0 30px ${({ theme }) => theme.color.lightgrey}; \r\n`;\r\n\r\nexport const Header = styled.header`\r\n  border-bottom: 1px solid ${({ theme }) => theme.color.lightgrey}; \r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-gap: 20px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px; \r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax414}px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  padding: 10px;\r\n  color: ${({ theme }) => theme.color.deepskyblue};\r\n  font-size: 30px;\r\n  margin: 0;\r\n  text-align: left;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n  padding: 20px;\r\n  background-color: ${({ theme }) => theme.color.yellow};\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax360}px) {\r\n    padding: 15px;\r\n  }\r\n`;","import React from 'react';\r\nimport { Wrapper, Header, Title, Body } from './styled';\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Body>\r\n      {body}\r\n    </Body>\r\n  </Wrapper> \r\n);\r\n\r\nexport default Section;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h2`\r\n  padding: 10px;\r\n  color: ${({ theme }) => theme.color.deepskyblue};\r\n  font-size: 30px;\r\n  margin: 0;\r\n  text-align: left;\r\n`;","import React from 'react';\r\nimport { Title } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <Title>{title}</Title>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 900px;\r\n  padding: 20px; \r\n  margin: 0 auto; \r\n`;","import React from 'react';\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n  <Wrapper>\r\n    {children}\r\n  </Wrapper>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Projects from \"../../common/Projects\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\nfunction Tasks() {\r\n  \r\n  return (\r\n    <Container>\r\n      <Projects />\r\n      <Header title=\"ToDo list\" />\r\n      <Section \r\n        title=\"Add new Task\" \r\n        body={<Form />} \r\n        />\r\n      <Section \r\n        title=\"ToDo list\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n        />\r\n{/* __________________________________________ */}\r\n      <section className=\"section section__stats\">\r\n        <div />\r\n      </section>\r\n{/* __________________________________________ */}\r\n\r\n  </Container>\r\n  );\r\n};\r\n\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\n\r\nexport default () => (\r\n  <Container>\r\n      <Header title=\"About the author\" />\r\n      <Section \r\n        title=\"Nikita Rysiev\" \r\n        body={\r\n          <>\r\n            Hej! My name a Nick, and I am a beginner Junior Front End Developer and Junior Manual Software Tester.\r\n            My native language is Russian, but I learn and practice more English language, Polish and some German.\r\n            \r\n            Now I try to study software testing and some coding of simple web applications.\r\n            \r\n            I want to know coding and speaking English very well to be useful in the labor market. \r\n          </>\r\n          } \r\n        />\r\n  </Container>\r\n);","import React from \"react\";\r\nimport { HashRouter, Link, Switch, Route } from \"react-router-dom\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\nimport Author from \"./features/author/Author\";\r\n\r\nexport default () => (\r\n  <HashRouter>\r\n    <nav>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/tasks\">\r\n            Tasks\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/author\">\r\n            About the author\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n      <Switch>\r\n        <Route path=\"/tasks\">\r\n          <Tasks />\r\n        </Route>\r\n        <Route path=\"/author\">\r\n          <Author />\r\n        </Route>\r\n      </Switch>\r\n    </nav>\r\n  </HashRouter>\r\n);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/ToDo-List--EN-CRMS--ReactApp/exampleTasks.json\");\r\n\r\n  if (!response.ok) {\r\n    new Error(response.statusText);\r\n  }\r\n\r\n  return await response.json();\r\n};","import { takeLatest, call, put, delay, select, takeEvery } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, setTasks, selectTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  console.log(\"I start work\")\r\n  try {\r\n    yield delay(1000);\r\n    const exampleTasks = yield call (getExampleTasks);\r\n    yield put(setTasks(exampleTasks));\r\n  } catch (error) {\r\n    yield call(alert, \"Something went wrong!\");\r\n  }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all ([\r\n    tasksSaga(),\r\n  ]);\r\n};","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from './GlobalStyle';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n","export const theme = {\r\n  color: {\r\n    white: \"#fff\",\r\n    black: \"#000\",\r\n    deepskyblue: \"#00bfff\",\r\n    crimson: \"#ec365b\",\r\n    lightslategrey: \"#778899\",\r\n    lightgrey: \"#d3d3d3\",\r\n    yellow: \"#ffff00\",\r\n  },\r\n  breakpoint: {\r\n    mobileMax360: 360,\r\n    mobileMax414: 414,\r\n  },\r\n};"],"sourceRoot":""}